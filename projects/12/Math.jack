// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bits;

    /** Initializes the library. */
    function void init() {
        let bits = Array.new(16);
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384 + 16384;
        return;
    }

    /** Returns if jth bit of x is 1 */
    function boolean bit(int x, int j){
        return ~((x & bits[j]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum, shift;
        let i = 0;
        let sum = 0;
        let shift = x;

        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shift;
            }
            let shift = shift + shift;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, result;
        var boolean pos;

        let pos = ((x < 0) = (y < 0));

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }
        let q = Math.divide(x, y+y);

        if ((x - (2*q*y)) < y) {
            let result = q + q;
        } else {
            let result = q + q + 1;
        }

        if (~pos) {
            let result = -result;
        }
        return result;

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int res, i, app, app_sq;

        let res = 0;
        let i = 7;

        while (~(i < 0)) {
            let app = res + bits[i];
            let app_sq = app * app;

            if (~(app_sq > x) & (app_sq > 0)) { // overflow protection
                let res = app;
            }
            let i = i - 1;
        }
        return res;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    function int two2(int power) {
        return bits[power];
    }
}
