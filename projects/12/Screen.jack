// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static int white_pixel, black_pixel;
    static boolean white, black, curr;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let white = false;
        let black = true;
        let white_pixel = 0;
        let black_pixel = 1;
        let curr = black;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {  // hardcoded screen size
            let screen[i] = white;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let curr = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;
        let address = (y*32) + (x/16);
        let mask = Math.two2(x & 15);

        if (curr) {
            let screen[address] = screen[address] | mask;
        } else {
            let screen[address] = screen[address] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, cond, temp, b_inc;

        let a = 0;
        let b = 0;
        if (~(x1 < x2)) {  // signs
          let temp = x1;
          let x1 = x2;
          let x2 = temp;
          let temp = y1;
          let y1 = y2;
          let y2 = temp;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dy < 0) {
          let b_inc = -1;
        } else {
          let b_inc = 1;
        }

        if (dy = 0) {  // straight
          while (~(a = dx)) {
            let a = a + 1;
            do Screen.drawPixel(x1 + a, y1);
          }
          return;
        }

        if (dx = 0) {  // straight
          while (~(b = dy)) {
            let b = b + b_inc;
            do Screen.drawPixel(x1, y1 + b);
          }
          return;
        }
        // diag line
        while ((a < dx) & (b < dy)) {
          let cond = (a * dy) - (b * dx);

          if (cond < 0) {
            let a = a + 1;
          } else {
            let b = b + 1;
          }
          do Screen.drawPixel(x1 + a, y1 + b);
        }

        while ((a < dx) & (b > dy)) {
          let cond = (a * dy) - (b * dx);

          if (cond > 0) {
            let a = a + 1;
          } else {
            let b = b - 1;
          }
          do Screen.drawPixel(x1 + a, y1 + b);
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawLine(x1, x2, y, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, r_squared;

        let dy = -r;
        let r_squared = r * r;
        while (~(dy > r)) {
            let dx = Math.sqrt(r_squared - (dy*dy));
            do Screen.drawLine(x-dx, x+dx, y+dy, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
