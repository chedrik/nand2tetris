// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buffer;
    field int buffer_len, str_len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let buffer = Array.new(maxLength);
        let buffer_len = maxLength;
        let str_len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do buffer.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return str_len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buffer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let buffer[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (str_len < buffer_len) {
            let buffer[str_len] = c;
            let str_len = str_len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (str_len > 0) {
            let str_len = str_len - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean negative;
        var int number, i, digit;

        let number = 0;
        let i = 0;

        while (i < str_len) {
          let digit = buffer[i] - 48;
          if (buffer[i] = 45) {
            let negative = true;
          } else {
            let number = (number * 10) + digit;
          }
          let i = i + 1;
        }
        if (negative) {
          let number = -number;
        }
        return number;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int first_digit, exp;
        let str_len = 0;

        if (val < 0) {
          let val = -val;
          do appendChar(45);
        }

        while (val > 0) {
          let exp = 1;
          let first_digit = val;

          while (first_digit > 9) {
            let first_digit = first_digit / 10;
            let exp = exp * 10;
          }
          let val = val - (exp * first_digit);
          do appendChar(first_digit + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
