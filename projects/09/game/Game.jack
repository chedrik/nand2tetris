// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */

class Game {
   field Square square, goal; // the square of this game & a goal square
   field int direction; // the square's current direction: 
                        // 1=up, 2=down, 3=left, 4=right
   field int score;
   field boolean speed_up;

   /** Constructs a new Square Game. */
   constructor Game new() {
      // Creates a 30 by 30 pixels square and positions it at the top-left
      // of the screen.
      let square = Square.new(150, 150, 10);
      let goal = Square.new(30, 30, 3);
      let direction = 4;  // initial state is to the right
      let score = 0;
      let speed_up = 0;
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do square.dispose();
      do goal.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      if (direction = 1) { do square.moveUp(); }
      if (direction = 2) { do square.moveDown(); }
      if (direction = 3) { do square.moveLeft(); }
      if (direction = 4) { do square.moveRight(); }
      do Sys.wait(5);  // delays the next movement
      return;
   }

   /** Checks if the goal was reached */
   method void check() {
      var boolean overlap;
      do goal.inc();
      let overlap = square.overlap(goal);
      if (overlap) {
         do goal.place();
         let score = score + 1;
         if (speed_up) {
            let speed_up = false;
            do square.incSpeed();
         } else {
            let speed_up = true;
         }
      }
      return;
   }

   /** Check if the square touches the border, and if so end the game */
   method boolean checkBorder() {
      var Array a;
      var boolean b;
      let a = square.getCoord();
      if ((a[0] < 1) | (a[1] < 1) | (a[2] > 509) | (a[3] > 253)) {
         let b = true;
      } else {
         let b = false;
      }
      return b;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         while ((key = 0) & ~exit) {
            let key = Keyboard.keyPressed();
            do moveSquare();
            do check();
            let exit = checkBorder();
         }

         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         // waits for the key to be released
         while (~(key = 0) & ~exit) {
            let key = Keyboard.keyPressed();
            do moveSquare();
            do check();
            let exit = checkBorder();
         }
     } // while
     return;
   }
}



