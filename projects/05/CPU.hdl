// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction handling between A/C
    Mux16 (a=instruction, b=outALU, sel=instruction[15], out=muxOut1);
    ARegister (in=muxOut1, load=loadA, out=outA, out[0..14]=addressM);
    Not(in=instruction[15], out=aOrC);
    Or(a=instruction[5], b=aOrC, out=loadA);
    
    // ALU handling
    Mux16 (a=outA, b=inM, sel=instruction[12], out=muxOut2);
    And (a=instruction[4], b=instruction[15], out=dLoad);
    DRegister (in=outALU, load=dLoad, out=outD);
    ALU (x=outD, y=muxOut2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zr, ng=ng);
    Mux(a=false,b=instruction[3],sel=instruction[15],out=writeM);

    // Jump handling
    DMux8Way (in=true, sel=instruction[0..2], a=null, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
    Not (in=zr, out=notZero);
    Not (in=ng, out=notNeg);

    And (a=notZero, b=notNeg, out=PosNonZero);
    And (a=notZero, b=ng, out=NegNonZero);
    Or (a=PosNonZero, b=zr, out=PosOrZero);
    Or (a=ng, b=zr, out=NegOrZero);

    And (a=JGT, b=PosNonZero, out=doJGT);
    And (a=JEQ, b=zr, out=doJEQ);
    And (a=JGE, b=PosOrZero, out=doJGE);
    And (a=JLT, b=NegNonZero, out=doJLT);
    And (a=JNE, b=notZero, out=doJNE);
    And (a=JLE, b=NegOrZero, out=doJLE);
    // Dumb 7 wayOR b/c of no sub-bussing internal pins. Determines if any jump is true
    Or (a=doJGT, b=doJEQ, out=temp);
    Or (a=temp, b=doJGE, out=temp1);
    Or (a=temp1, b=doJLT, out=temp2);
    Or (a=temp2, b=doJNE, out=temp3);
    Or (a=temp3, b=doJLE, out=temp4);
    Or (a=temp4, b=JMP, out=temp5);
    And (a=temp5, b=instruction[15], out=pcLoad);

    // counter handling
    Not (in=pcLoad, out=pcInc);
    PC (in=outA, inc=pcInc, load=pcLoad, reset=reset, out[0..14]=pc);
}